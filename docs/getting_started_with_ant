Getting started with JtestR - with ant
--------------------------------------

The first step to get started with JtestR is to download the binary jar file from http://dist.codehaus.org/jtestr. The file is quite large, since it contains several interesting libraries. Once you have downloaded the jar file, the only thing you need to get started is to add it to your classpath for the project you want to test, and then make sure you define the tasks necessary for JtestR to work. There are two tasks you might be interested in adding to your build.xml. The first one is for general testing:

{noformat}
<target name="test" description="Runs all tests">
  <taskdef name="jtestr" classname="org.jtestr.ant.JtestRAntRunner" classpath="lib/jtestr.jar"/>

  <jtestr/>
</target>
{noformat}

Make sure that change the classpath variable of the taskdef to point to the real jtestr.jar. Having the build.xml and jtestr.jar files in the same directory will not work. When you run the test target in Ant, jtestr will check in several directories for the place where you have put your tests. When you run the test target in Ant, jtestr will by default look for and run tests from a directory named "test" and its subdirectories.

If you want to specify a different directory for your tests, use the "tests" property of the jtestr task:

{noformat}
   <jtestr tests="my_tests"/>
{noformat}

Where my_tests is a directory relative from the build.xml file. The jtestr task takes these arguments:

- failOnError (boolean, default is true): Whether JtestR should fail the Ant build when the testing fails.
- port (int, default is 22332): The port to try checking for a JtestR server on.
- tests (String, default is "test"): The directory to look for JtestR configuration file and tests.
- groups (String, default is ""): The groups to run, separated by comma. If not specificed, runs default groups.
- logging (String, default is "WARN"): The logging level, valid values are: "NONE","ERR","WARN","INFO","DEBUG"
- configFile (String, default is "jtestr_config.rb"): The name of the config file. Note that this is not a path, just the name of the file itself.
- outputLevel (String, default is "QUIET"): The unified result handling in JtestR has different levels of verbosity. Valid values are: "NONE","QUIET","NORMAL","VERBOSE","DEFAULT"
- output (String, default is "STDOUT"): The place output from test runs should end up. This can be any Ruby code. The resulting object needs to be IO-like.
- load (String, default is ""): A string detailing the load strategy to use if any needed. Format: "rspec = abc, foo; active_support=another,dir"

You can also set a system property to use a specific test. This isn't one of the options to configure, but instead is only a Java system property:

- jtestr.test (String, default is ""): The name of a specific test to run. If empty it isn't used.

If you set this as an Ant property, it will be picked up and inserted as a system property too.

If you are running your tests often - as you should - you will soon realize that it takes some time for JtestR to get started. This is because the JRuby runtime is a bit heavy weight to start. To solve this problem, there is a second ant task available that starts a background server. If a background server is started, the regular jtestr task will automatically use that instead. Both jtestr and jtestr-server takes an optional port to use for the server:

{noformat}
   <target name="test-server" description="Starts test server">
    <taskdef name="jtestr-server" classname="org.jtestr.ant.JtestRAntServer" classpath="lib/jtestr.jar"/>

    <jtestr-server port="20333" runtimes="3"/>
  </target>
{noformat}

Classes and resources loaded by the server JVM classloader from the taskdef classpath will not be dynamically replaced when you rerun your tests. It is therefore recommended that you keep the server classpath to a minimum (i.e. just the jtestr.jar).

The jtestr-server task takes these arguments:

- port (int, default is 22332): The port to start the JtestR server on.
- runtimes (int, default is 3): How many runtimes to cycle through for testing. 
- debug (boolean, default is true): Should the server write information about each connection or not?

The server takes an optional argument for how many JRuby runtimes to start. In most cases 2 or 3 is good enough. It will take some time for the server to start, but once it's started it will cycle through runtimes so you should be able to start test runs very quickly. You need to keep the test-server ant task running to keep the server running. The task also provides some logging for every time it runs a test task.

The option for specifying load strategy is a bit special and needs to be explained. JtestR includes several different libraries, and uses these internal libraries for everything. In some cases this might not be ideal, and in that case you might want to use a version of a library that you have locally instead. You accomplish that by setting the "load" parameter. This parameter should be a list of keys and values. The values can be separated with commas, while each key value pair should be separated with semi colons. The value should be one or more directories where the code for the library lives. So for example, say that you have ActiveSupport in the directory /usr/lib/ActiveSupport-2.1.1, and you need something else on the load path for ActiveSupport to work, which lives in /usr/lib/RubyFoobar-1.2. Then you can specify this by setting load to be the string "active_support = /usr/lib/ActiveSupport-2.1.1, /usr/lib/RubyFoobar-1.2". Note that spaces are ignored and can be added for readability. The only keys supported at this point is: "active_support", "expectations", "mocha, "spec" and "dust". Using this feature might fail in strange ways, since JtestR is written based on the versions of the libraries bundled.

And that's really all you need to know on how to get started from the Ant side of things. The next step in getting started is to look at how to get started with Maven integration, or how to get started writing tests with JtestR.

